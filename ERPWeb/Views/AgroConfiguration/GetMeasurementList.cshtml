@{
    ViewBag.Title = "GetMeasurment";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-12">

                    <div class="row" style="margin-top:-20px">
                        <div class="col-md-12 " style="height:60px;text-align:center">
                            <div class="card" style="background-color:#001f3f">

                                <div class="px-2 py-1">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <h5 class="text-bold float-left text-white">
                                                Measurement Setup
                                            </h5>
                                        </div>
                                        <div class="col-md-2">

                                        </div>
                                        <div class="col-md-2 text-center">
                                            <input type="text" class="form-control form-control-sm" id="searchByAny" placeholder="Search by any" />

                                        </div>
                                        <div class="col-md-2">

                                        </div>

                                       

                                        <div class="col-md-3">
                                            <a href="/AgroConfiguration/CreateMeasurement" class="btn btn-outline-warning btn-sm float-lg-right"><i class="fa fa-plus"></i> Create Measurement</a>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-md-12">
                            <div class="card" style="margin-top:-15px">
                                <div class="card-body" style="margin-top:-10px">
                                    <div class="row">
                                        <div class="col-md-12 text-sm text-sm" id="dataContainer3" style="overflow-y:scroll">
                                            @*@{Html.RenderAction("GetMeasurementList", new { @flag = "list" });}*@
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>
</div>



<div class="modal" id="modalMeasurementSetup" role="dialog">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header bg-gradient-gray-dark">
                <h4 class="modal-title" id="modalHeading"><span id="spanModalHeading"></span></h4>
                <button class="close" type="button" data-dismiss="modal"><span aria-hidden="true">&times;</span></button>

            </div>
            <div class="modal-body">
                <form id="bankForm">
                    <input type="hidden" id="hiddenMeasureMentId" />
                    <div class="form-row">

                        <div class="form-row col-md-12">
                            <label for="measureMentName" class="control-label">Measurement Name </label>
                            <input type="text" id="measureMentName" class="form-control form-control-sm" autofocus />
                            <span class="error hide required-measureMentName font-weight-bold">Input MeasureMent Name !</span>

                        </div>


                        <div class="form-group col-md-12">
                            <label for="masterCartoonBox" class="control-label">Master Cartoon </label>
                            <input type="number" id="masterCartoonBox" class="form-control form-control-sm" />
                            <span class="error hide required-masterCartoonBox font-weight-bold">Input Master Cartoon!</span>

                        </div>

                        <div class="form-group col-md-12">
                            <label for="innerBox" class="control-label">Inner Box</label>
                            <input type="number" id="innerBox" class="form-control form-control" />
                            <span class="error hide required-innerBox font-weight-bold">Input Inner Box</span>

                        </div>

                        <div class="form-group col-md-12">
                            <label for="packSize" class="control-label">Pack Size </label>
                            <input type="number" id="packSize" class="form-control form-control-sm" />
                            <span class="error hide required-packSize font-weight-bold">Input packSize!</span>

                        </div>
                        <div class="col-md-12">
                            <label for="ddlUnits" class="control-label font-weight-bold">Unit Name</label>
                            @*<input type="number" id="ddlUnits" class="form-control form-control-sm" />*@
                            @Html.DropDownList("ddlUnits", (IEnumerable<SelectListItem>)ViewBag.ddlUnits, "--Select Unit--", new { @class = "form-control form-control-sm ctrl-changed select2 select2-danger" })

                            <span class="error hide required-UnitName font-weight-bold">Unit Name is Required</span>
                        </div>
                       

                        <div class="form-group col-md-12">
                            <label for="ddlStatus" class="control-label">Status</label>
                            <select class="form-control form-control-sm" id="ddlStatus">
                                <option value="Active">Active</option>
                                <option value="InActive">InActive</option>
                            </select>
                            <span class="error hide required-ddlStatus font-weight-bold">Status Is Required</span>
                        </div>



                    </div>
                </form>

            </div>


            <div class="modal-footer btn-default bg-gradient-gray-dark">
                <div class="col-md-6">
                    <div id="msg1" class="alert alert-success hide float-left">
                        Data has been saved Successful!
                    </div>
                    <div id="msg2" class="alert alert-danger hide float-left">
                        Data has been failed to save!
                    </div>
                </div>
                <button type="button" class="btn btn-outline-danger btn-sm float-right" data-dismiss="modal" data-target="#"><i class="fas fa-paper-plane"></i> Cancel </button>
                <button type="submit" class="btn btn-outline-success btn-sm float-right" id="btnUpdate"><i class="fas fa-paper-plane"></i> <span id="btnMeasureMentSaveText">Save</span> </button>

            </div>
        </div>
    </div>

</div>

@section scripts {
    <script type="text/javascript">
        var ddlOrganiation = $("#ddlOrganiation");
        var txtmeasurementName = $("#txtmeasurementName");
        var txtmasterBox = $("#txtmasterBox");
        var txtinnerBox = $("#txtinnerBox")
        var txtpackSize = $("#txtpackSize");
        var txtunit = $("#txtunit");

        //for edit
        var measureMentName = $("#measureMentName");
        var masterCartoonBox = $("#masterCartoonBox");
        var innerBox = $("#innerBox");
        var packSize = $("#packSize");
        var unit = $("#unit");
        var hiddenMeasureMentId = $("#hiddenMeasureMentId");
        var ddlStatus = $("#ddlStatus");
        var ddlUnit = $("#ddlUnit");
        var unitName = $("#unitName");
        var unitId = $("#unitId");
        var ddlUnits = $("#ddlUnits");
        var searchByAny = $("#searchByAny");


        $(document).ready(function () {
            $('.select2').select2();

        
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            });
            $("#btnSubmit").hide();
            $(function () {
                $('#txtmeasurementName').focus();
            });
            LoadMeasurement();
           
        })

        searchByAny.keyup(function () {
            LoadMeasurement()
        })
       


        function LoadMeasurement() {
            debugger;
            var data = { flag: "list", id: 0, status: $.trim(searchByAny.val()) };
            $.when(getReqWithData('html', 'GET', '/AgroConfiguration/GetMeasurementList', data)).then(function (res, status) {
                console.log(status);
                if (status === "success") {
                    $("#dataContainer3").fadeOut('500', function () {
                        $("#dataContainer3").empty();
                        $("#dataContainer3").append(res).fadeIn('500');
                    });
                }
            }).fail(function (error) {
                console.log(error);
            });

        }


        //$("#addTolist").click(function (e) {
        //    e.preventDefault();
        //    if (validate() == true) {
        //        debugger;
        //        var index = $("#tblMeasurement  tbody tr").length;
        //        var sl = "<td class='text-center'>" + (index + 1) + "</td>";
        //        var org = "<td class='hide'>" + ddlOrganiation.val(); + "</td>";
        //        var measurementName = "<td class='text-center'>" + txtmeasurementName.val(); + "</td>";
        //        var masterBox = "<td class='hide text-center'>" + txtmasterBox.val(); + "</td>";
        //        var innerBox = "<td class='hide text-center'>" + txtinnerBox.val(); + "</td>";
        //        var packSize = "<td class='hide text-center'>" + txtpackSize.val(); + "</td>";
        //        var unitName = "<td class='text-center'>" + dropDownSelectedText("ddlUnit") +  "</td>";
        //        //var unitName = "<td>"+ dropDownSelectedText("ddlUnit") + "</td>";
        //        var unitId = "<td class='hide UnitId'>" + ddlUnit.val() + "</td>";
        //        if (txtmasterBox.val() != "" && txtinnerBox.val() != "" && txtpackSize.val() != "") {
        //            item = txtmasterBox.val().concat("X", txtinnerBox.val(), "X", txtpackSize.val())
        //        }
        //        else if (txtmasterBox.val() != "" && txtinnerBox.val() != "" && txtpackSize.val() == "") {
        //            item = txtmasterBox.val().concat("X", txtinnerBox.val())
        //        }
        //        else if (txtmasterBox.val() != "" && txtinnerBox.val() == "" && txtpackSize.val() != "") {
        //            item = txtmasterBox.val().concat("X", txtpackSize.val())
        //        }
        //        else if (txtmasterBox.val() == "" && txtinnerBox.val() != "" && txtpackSize.val() != "") {
        //            item = txtinnerBox.val().concat("X", txtpackSize.val())
        //        }
        //        else if (txtmasterBox.val() != "" && txtinnerBox.val() == "" && txtpackSize.val() == "") {
        //            item = txtmasterBox.val()
        //        }
        //        else if (txtmasterBox.val() == "" && txtinnerBox.val() == "" && txtpackSize.val() != "") {
        //            item = txtpackSize.val()
        //        }
        //        else if (txtmasterBox.val() == "" && txtinnerBox.val() != "" && txtpackSize.val() == "") {
        //            item = txtinnerBox.val()
        //        }

        //        var measurementItem = "<td class='text-center' >" + item + "</td>";
        //        var action = "<td class='text-center'><a href='#' class='btn btn-sm btn-danger data-onfly-del'><i class='far fa-trash-alt' ></i>Delete</a></td>";

        //        var tr = "<tr>" + sl + measurementName + measurementItem + unitName + unitId + org + masterBox + innerBox + packSize + action  +"</tr>";
        //        $("#btnSubmit").show();
        //        $("#tblMeasurement tbody").append(tr);
               
        //        clearCtrl();


        //    }

        //});

        //$(document).on("click", "a.data-onfly-del", function (e) {
        //    e.preventDefault();
        //    var index = $(this).parent().parents('tbody tr').index();
        //    removeTableRow("#tblMeasurement tbody", index);
        //    fnFixTheTbodyRowSerial("#tblMeasurement", index);
        //})




        //$("#btnSubmit").click(function (e) {
        //    debugger;
        //    e.preventDefault();
        //    var tblTRLeangth = $("#tblMeasurement tbody tr").length;
        //    if (tblTRLeangth > 0) {
        //        bootbox.confirm("Are You Sure To Save These?", function (result) {
        //            if (result == true) {
        //                var measureMentData = [];
        //                debugger;
        //                $.each($("#tblMeasurement tbody tr"), function (index, item) {
        //                    var td = $(this).children('td');
        //                    measureMentData.push({
        //                        //OrganizationId: td.eq(4).html(),
        //                        //MeasurementName: td.eq(1).html(),
        //                        //MasterCarton: td.eq(5).html(),
        //                        //InnerBox: td.eq(6).html(),
        //                        //PackSize: td.eq(7).html(),
        //                        //UnitId: td.eq(9).html()
        //                        measurementName: td.eq(1).html(),
        //                        measurementItem: td.eq(2).html(),
        //                        unitName: td.eq(3).html(),
        //                        unitId: td.eq(4).html(),

        //                        //OrganizationId5: td.eq(5).html(),
        //                        masterCarton: td.eq(6).html(),
        //                        InnerBox: td.eq(7).html(),
        //                        packSize: td.eq(8).html()
        //                        //OrganizationId9: td.eq(9).html(),
        //                        //OrganizationId10: td.eq(10).html()


        //                    })


        //                })

        //                console.log(measureMentData);
        //                measureMentData = JSON.stringify({ models: measureMentData });
        //                $.when(postReqWithToken(dataType.applicationJson, dataType.json, 'POST', '/AgroConfiguration/SaveMeasurement', measureMentData, getToken())).then(function (res, status) {
        //                    if (status == "success") {
        //                         setTimeout(function () {
        //                            $('.toastrDefaultSuccess').trigger('click');
        //                             redirectPage("GetMeasurementList");
        //                        }, 500);
        //                    }
        //                    else {
        //                        $('.toastrDefaultError').trigger('click');
        //                    }
        //                }).fail(function (error) {
        //                    alert(execuStatus.fail);
        //                })


        //            }


        //        })
        //    }

        //});

        $("#btnUpdate").click(function (e) {
            e.preventDefault();
            if (true) {
                debugger;
                var data = {
                    measurementId: hiddenMeasureMentId.val(), measurementName: measureMentName.val(), masterCarton: masterCartoonBox.val(), innerBox: innerBox.val(), packSize: packSize.val(), UnitId: TryParseInt(ddlUnits.val(), 0), Status: ddlStatus.val()
            }
          //  var models = JSON.stringify(data);

            $.when(postReqWithToken(dataType.applicationJson, dataType.json, 'POST', '/AgroConfiguration/UpdateMeasurement', JSON.stringify(data), getToken())).then(function (res, status) {
                if (res == true) {

                    $("#modalMeasurementSetup").modal("hide")

                 setTimeout(function () {
                        $('.toastrDefaultSuccess').trigger('click');
                        redirectPage('@Url.Action("GetMeasurementList")');
                    }, 1000);
                            }
                else {
                    $('.toastrDefaultError').trigger('click');
                }
            }).fail(function (error) {
                alert(execuStatus.fail);
            })


            }



        });

        $(document).ready(function () {
            //$("#btnSubmit").hide();
            $("#addTolist").hide();
            //$("#btnUpdate").hide();
            $(function () {
                $('#txtmeasurementName').focus();
            });

        })

        txtmeasurementName.keyup(function () {

            var value = $(this).val();
            if (value.length > 1) {
                $("#addTolist").show();

            }
            else {
                $("#addTolist").hide();
            }


        })

        //txtmasterBox.keyup(function () {
        //    var value = $(this).val();
        //    if (value.length > 2) {
        //        $("#addTolist").show();

        //    }
        //    else {
        //        $("#addTolist").hide();
        //    }


        //})



        $(document).on("click", "a.data-edit-item-measurement", function () {

            OpenModal();
            debugger;
            var row = $(this).parent().parents("tr");
            var td1 = row.find("td:eq(1)").html();
            var td2 = row.find("td:eq(2)").html();
            var td3 = row.find("td:eq(3)").html();
            var td4 = row.find("td:eq(4)").html();
            var td5 = row.find("td:eq(5)").html();
            var td6 = row.find("td:eq(6)").html();
            var td7 = row.find("td:eq(7)").html();
            var td8 = row.find("td:eq(8)").html();
            var td9 = row.find("td:eq(9)").html();
            
            //UnitId.val();
            hiddenMeasureMentId.val(td1);
            measureMentName.val(td2);
            masterCartoonBox.val(td4);
            innerBox.val(td5);
            packSize.val(td6);
            ddlUnits.val(td8);
            ddlUnits.trigger("change");
           // unitId.val(td8);
            ddlStatus.val(td9);
            ddlStatus.trigger("change");


            //hiddenMeasureMentId.val(td1);
            ////measureMentName.val(td2);
            ////masterCartoonBox.val(td4);
            ////innerBox.val(td5);
            ////packSize.val(td6);
            ////unitName.val(td3);
            ////unitName.val(td7);
            ////unitName.trigger("change");
            ////measureMentName.val(td4);
            ////measureMentName.val(td5);
            ////measureMentName.val(td6);
            
            

        })
        function OpenModal() {
            $("#modalMeasurementSetup").modal("show");
            $("#modalHeading").text("MeasureMent Setup Update");
            $("#btnMeasureMentSaveText").text("Update");
            $(function () {
                $('#measurementName').focus();
            });
        }

        //function validate() {
        //    var isValid = true;
        //    $(".error").addClass('hide');

        //    if (ddlOrganiation.val() === "") {
        //        $(".req-ddlOrganiation").removeClass('hide');
        //        isValid = false;
        //    }
        //    if (txtmeasurementName.val() === "") {
        //        $(".req-txtmeasurementName").removeClass('hide');
        //        isValid = false;
        //    }

        //    //if (txtmasterBox.val() === "" ) {
        //    //    $(".req-txtmasterBox").removeClass('hide');
        //    //    isValid = false;
        //    //}
        //    //if (txtinnerBox.val() === "") {
        //    //    $(".req-txtinnerBox").removeClass('hide');
        //    //    isValid = false;
        //    //}
        //    if (txtunit.val() === "") {
        //        $(".req-txtunit").removeClass('hide');
        //        isValid = false;
        //    }
        //    //if (TryParseInt(txtpackSize.val(), 0) <= 0) {
        //    //    $(".req-txtpackSize").removeClass('hide');
        //    //    isValid = false;
        //    //}

        //    return isValid;
        //}
        //function validateUpdate() {
        //    var isValid = true;
        //    $(".error").addClass('hide');


        //    if (measureMentName.val() === "") {
        //        $(".required-measureMentName").removeClass('hide');
        //        isValid = false;
        //    }

        //    if (masterCartoonBox.val() === "") {
        //        $(".required-masterCartoonBox").removeClass('hide');
        //        isValid = false;
        //    }
        //    if (innerBox.val() === "") {
        //        $(".required-innerBox").removeClass('hide');
        //        isValid = false;
        //    }
        //    if (unit.val() === "") {
        //        $(".required-unit").removeClass('hide');
        //        isValid = false;
        //    }
        //    if (packSize.val() === "") {
        //        $(".required-packSize").removeClass('hide');
        //        isValid = false;
        //    }

        //    return isValid;
        //}

        function clearCtrl() {
            txtmeasurementName.val("");
            txtmasterBox.val("");
            txtinnerBox.val("");
            txtpackSize.val("");
            txtunit.val("");

        }

        function redirectPage(page) {
            window.location.replace(page);
        }

        function validateUpdate() {
            var isValid = true;
            $(".error").addClass('hide');


            if (measureMentName.val() === "") {
                $(".required-measureMentName").removeClass('hide');
                isValid = false;
            }

            if (masterCartoonBox.val() === "") {
                $(".required-masterCartoonBox").removeClass('hide');
                isValid = false;
            }
            if (innerBox.val() === "") {
                $(".required-innerBox").removeClass('hide');
                isValid = false;
            }
            if (unit.val() === "") {
                $(".required-unit").removeClass('hide');
                isValid = false;
            }
            if (packSize.val() === "") {
                $(".required-packSize").removeClass('hide');
                isValid = false;
            }

            return isValid;
        }

    </script>




}




